@using Blazor.Extensions.Logging
@using Microsoft.Extensions.Logging

<header class="navbar navbar-default navbar-fixed-top"role="navigation">
<link href="css/Banner.css" rel="stylesheet"/>
    <div class="container-fluid">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target=".navbar-collapse.app-actions">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a href="."><span class="navbar-brand">@applicationName</span></a>
            </div>


            <div class="navbar-collapse app-actions collapse navbar-left">
                    <MenuBar @ref="primaryMenu" listClass="primary" />
            </div>

            <div class="navbar-collapse app-actions collapse navbar-right">
                    <MenuBar @ref="secondaryMenu" />
                    <MenuBar @ref="tertiaryMenu" />
            </div>
    </div>
</header>
@code{
    [Inject]
    protected ILogger<Banner> logger { get; set; }

    [Inject]
    protected Api Api { get; set; }
    [Inject]
    protected ApacheIsisApi IsisApi { get; set; }
    [Inject]
    protected MissingApi MissingApi { get; set; }

    [Parameter]
    public HomePage Context { get; set; }
    private ExtendedResourceList services;
    private User user;
    private string applicationName;

    private MenuBar primaryMenu;
    private MenuBar secondaryMenu;
    private MenuBar tertiaryMenu;

    private IDictionary<string,MenuBar> menus = new Dictionary<string,MenuBar>();

    protected override void OnInitialized(){
        applicationName = MissingApi.GetApplicationName();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            menus.Add("PRIMARY",primaryMenu);
            menus.Add("SECONDARY",secondaryMenu);
            menus.Add("TERTIARY",tertiaryMenu);
            logger.LogInformation(menus);

            if(Context == null){
                throw new ArgumentNullException("Context");
            }

            FillUser();
            await PopulateMenus();
        }
    }

    private async Task PopulateMenus(){
        services = await this.IsisApi.Load<ExtendedResourceList>(this.Context.DomainServices);

        foreach(var linkToService in services.value){
            AddToRightMenuBar(linkToService);
        }
    }

    private async Task AddToRightMenuBar(Link linkToService){
        //load service
        await Api.Load<ExtendedResourceList>(linkToService).
            ContinueWith(x =>{
                var menu = menus[x.Result.extensions.menuBar];
                if(menu == null){
                    throw new ArgumentNullException("menuismissing");
                }

                logger.LogInformation(menu);
                if(x.Result.HasMembers){
                    menu.AddService(x.Result);
                }
            }); 
    }

    private void FillUser(){
        Api.Load<User>(this.Context.User).ContinueWith(
            x => tertiaryMenu.title =  x.Result.userName); 
    }
}

