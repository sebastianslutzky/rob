
@using Blazor.Extensions.Logging
@using Microsoft.Extensions.Logging
@using types = RestfulObjectApi.Representation.Types

      <ul class="nav navbar-nav @listClass">
            <li class="dropdown ExportToWordMenu">
                <a class="dropdown-toggle" data-toggle="dropdown">
                 <span>@title</span>
                  <span class="caret"></span></a>
                <ul class="dropdown-menu scrollable-menu multi-level" role="menu">
                        @for (var i=0; i < services.Count;i++)
                        {
                            var service = services[i];
                            if(lastKnownCategory != service.title){
                              if(!string.IsNullOrEmpty(lastKnownCategory)){
                                logger.LogInformation($"({title})lastcat:{lastKnownCategory}. this one: {service.title} divider: @lastKnownCategory-@service.title");
                                <li class="divider @lastKnownCategory-@service.title"></li>
                              }
                              else{
                                logger.LogInformation("no categoy known");
                              }

                              logger.LogInformation($"from {lastKnownCategory} to {service.title}");
                              lastKnownCategory = service.title;
                            }

                            foreach(var accion in service.members){
                              logger.LogInformation($"adding ({service.title}) {accion.Value}");
                                 <MenuAction Context='accion.Value'/>
                            }

                        }
                </ul>
            </li>
        </ul>
@code{
    [Inject]
    protected ILogger<MenuBar> logger{get;set;}
    private string lastKnownCategory = null;

    [Parameter]
    public string listClass{get;set;}

    [Parameter]
    public string title{get;set;}

    private IList<types.Object> services {get;set;} = new List<types.Object>();
    
    public void AddService(types.Object link){
        services.Add(link); 
        StateHasChanged();
    }

  private bool isLast(int index)
  {
    return index == this.services.Count - 1;
  }
}


